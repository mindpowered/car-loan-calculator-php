<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace carloancalculator;

use \php\_Boot\HxAnon;
use \php\Boot;

class Calc {
	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param float $monthlyPayment
	 * @param float $tradeInAllowance
	 * @param float $tradeInLoanBalance
	 * @param float $downPaymentAndRebates
	 * @param float $loanDuration
	 * @param float $salesTaxRate
	 * @param float $interestRate
	 * 
	 * @return object
	 */
	public function calcAffordability ($monthlyPayment, $tradeInAllowance, $tradeInLoanBalance, $downPaymentAndRebates, $loanDuration, $salesTaxRate, $interestRate) {
		#/src/carloancalculator/Calc.hx:33: characters 9-49
		$taxrate = $salesTaxRate / 100.;
		#/src/carloancalculator/Calc.hx:36: characters 9-32
		$interest = 0;
		#/src/carloancalculator/Calc.hx:37: characters 9-58
		$aftertax = $monthlyPayment * $loanDuration;
		#/src/carloancalculator/Calc.hx:38: characters 9-57
		$beforetax = $aftertax / (1. + $taxrate);
		#/src/carloancalculator/Calc.hx:39: characters 9-46
		$tax = $aftertax - $beforetax;
		#/src/carloancalculator/Calc.hx:40: characters 9-37
		$price = $beforetax;
		#/src/carloancalculator/Calc.hx:42: lines 42-57
		if ($interestRate > 0) {
			#/src/carloancalculator/Calc.hx:43: characters 13-36
			$M = $monthlyPayment;
			#/src/carloancalculator/Calc.hx:45: characters 13-30
			$q = 12;
			#/src/carloancalculator/Calc.hx:46: characters 13-47
			$i = $interestRate / 100.;
			#/src/carloancalculator/Calc.hx:47: characters 13-47
			$n = $loanDuration / 12.0;
			#/src/carloancalculator/Calc.hx:48: characters 13-80
			$P = $M * (1.0 - ((1.0 + $i / $q) ** (-1. * $n * $q))) * ($q / $i);
			#/src/carloancalculator/Calc.hx:49: characters 13-43
			$I = $M * $n * $q - $P;
			#/src/carloancalculator/Calc.hx:51: characters 13-89
			$aftertax = $P + $downPaymentAndRebates + $tradeInAllowance - $tradeInLoanBalance;
			#/src/carloancalculator/Calc.hx:52: characters 13-25
			$interest = $I;
			#/src/carloancalculator/Calc.hx:53: characters 13-50
			$rebates = $tradeInAllowance;
			#/src/carloancalculator/Calc.hx:54: characters 13-72
			$beforetax = ($taxrate * $rebates + $aftertax) / (1. + $taxrate);
			#/src/carloancalculator/Calc.hx:55: characters 13-39
			$tax = $aftertax - $beforetax;
			#/src/carloancalculator/Calc.hx:56: characters 13-30
			$price = $beforetax;
		}
		#/src/carloancalculator/Calc.hx:59: characters 9-50
		$total = $price + $tax + $interest;
		#/src/carloancalculator/Calc.hx:62: characters 20-48
		$tmp = floor($price * 100 + 0.5) / 100.0;
		#/src/carloancalculator/Calc.hx:63: characters 18-44
		$tmp1 = floor($tax * 100 + 0.5) / 100.0;
		#/src/carloancalculator/Calc.hx:64: characters 23-54
		$tmp2 = floor($interest * 100 + 0.5) / 100.0;
		#/src/carloancalculator/Calc.hx:61: lines 61-66
		return new HxAnon([
			"price" => $tmp,
			"tax" => $tmp1,
			"interest" => $tmp2,
			"total" => floor($total * 100 + 0.5) / 100.0,
		]);
	}

	/**
	 * @param float $principal
	 * @param float $annualInterestRatePercent
	 * @param int $paymentsPerYear
	 * @param int $totalPayments
	 * @param string $frequencyString
	 * 
	 * @return object
	 */
	public function calcPay ($principal, $annualInterestRatePercent, $paymentsPerYear, $totalPayments, $frequencyString) {
		#/src/carloancalculator/Calc.hx:70: characters 9-39
		$q = $paymentsPerYear;
		#/src/carloancalculator/Calc.hx:71: characters 9-56
		$i = $annualInterestRatePercent / 100.;
		#/src/carloancalculator/Calc.hx:72: characters 9-33
		$P = $principal;
		#/src/carloancalculator/Calc.hx:73: characters 9-63
		$n = $totalPayments / (1.0 * $paymentsPerYear);
		#/src/carloancalculator/Calc.hx:74: characters 9-71
		$mden = $q * (1.0 - ((1.0 + $i / $q) ** (-1.0 * $n * $q)));
		#/src/carloancalculator/Calc.hx:75: characters 9-32
		$M = $P * $i / $mden;
		#/src/carloancalculator/Calc.hx:76: characters 9-39
		$I = $M * $n * $q - $P;
		#/src/carloancalculator/Calc.hx:79: characters 22-46
		$tmp = floor($M * 100 + 0.5) / 100.0;
		#/src/carloancalculator/Calc.hx:77: lines 77-81
		return new HxAnon([
			"frequency" => $frequencyString,
			"payment" => $tmp,
			"interest" => floor($I * 100 + 0.5) / 100.0,
		]);
	}

	/**
	 * @param float $newCarPrice
	 * @param float $tradeInAllowance
	 * @param float $tradeInLoanBalance
	 * @param float $downPaymentAndRebates
	 * @param float $loanDuration
	 * @param float $salesTaxRate
	 * @param float $interestRate
	 * 
	 * @return \Array_hx
	 */
	public function calcPayments ($newCarPrice, $tradeInAllowance, $tradeInLoanBalance, $downPaymentAndRebates, $loanDuration, $salesTaxRate, $interestRate) {
		#/src/carloancalculator/Calc.hx:13: characters 9-84
		$tax = $salesTaxRate / 100. * ($newCarPrice - $tradeInAllowance);
		#/src/carloancalculator/Calc.hx:14: characters 9-119
		$principal = $newCarPrice - $tradeInAllowance + $tradeInLoanBalance - $downPaymentAndRebates + $tax;
		#/src/carloancalculator/Calc.hx:16: characters 9-53
		$principal = floor($principal * 100 + 0.5) / 100.0;
		#/src/carloancalculator/Calc.hx:18: characters 9-41
		$ret = new \Array_hx();
		#/src/carloancalculator/Calc.hx:19: characters 9-94
		$x = $this->calcPay($principal, $interestRate, 12, (int)($loanDuration), "Monthly");
		$ret->arr[$ret->length++] = $x;
		#/src/carloancalculator/Calc.hx:20: characters 9-116
		$x = $this->calcPay($principal, $interestRate, 26, (int)(ceil($loanDuration * 2.16666666666666652)), "Bi-Weekly");
		$ret->arr[$ret->length++] = $x;
		#/src/carloancalculator/Calc.hx:21: characters 9-112
		$x = $this->calcPay($principal, $interestRate, 52, (int)(ceil($loanDuration * 4.33333333333333304)), "Weekly");
		$ret->arr[$ret->length++] = $x;
		#/src/carloancalculator/Calc.hx:22: characters 9-19
		return $ret;
	}
}

Boot::registerClass(Calc::class, 'carloancalculator.Calc');
